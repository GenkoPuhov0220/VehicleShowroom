// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VehicleShowroom.Data;

#nullable disable

namespace VehicleShowroom.Data.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    [Migration("20241208204120_SeedSuperCar")]
    partial class SeedSuperCar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.ApplicationUserVehicle", b =>
                {
                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "VehicleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("UsersVehicles");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BusId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Buses");

                    b.HasData(
                        new
                        {
                            BusId = 1,
                            Capacity = 66,
                            Description = "Volvo 9700 DD is an extremely flexible double decker that offers impressive capacity and possibilities for different kinds of operations.",
                            HorsePower = 445,
                            IsDelete = false,
                            Transmission = "Automatic",
                            VehicleId = 4
                        });
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Kilometers")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("CarId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            CarId = 1,
                            Description = "Fast and comfort",
                            HorsePower = 245,
                            IsDelete = false,
                            Kilometers = 150000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 1
                        },
                        new
                        {
                            CarId = 2,
                            Description = "Lazy car",
                            HorsePower = 224,
                            IsDelete = false,
                            Kilometers = 300000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 2
                        },
                        new
                        {
                            CarId = 3,
                            Description = "Luxury car",
                            HorsePower = 356,
                            IsDelete = false,
                            Kilometers = 22200,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 3
                        },
                        new
                        {
                            CarId = 4,
                            Description = "Powerful and reliable",
                            HorsePower = 375,
                            IsDelete = false,
                            Kilometers = 5000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 10
                        },
                        new
                        {
                            CarId = 5,
                            Description = "Spacious and efficient",
                            HorsePower = 203,
                            IsDelete = false,
                            Kilometers = 25000,
                            NumberOfDoors = 5,
                            Transmission = "CVT",
                            VehicleId = 11
                        },
                        new
                        {
                            CarId = 6,
                            Description = "Luxury electric sedan",
                            HorsePower = 1020,
                            IsDelete = false,
                            Kilometers = 10000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 12
                        },
                        new
                        {
                            CarId = 7,
                            Description = "Luxury sedan",
                            HorsePower = 204,
                            IsDelete = false,
                            Kilometers = 60000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 13
                        },
                        new
                        {
                            CarId = 8,
                            Description = "Off-road capable",
                            HorsePower = 285,
                            IsDelete = false,
                            Kilometers = 58912,
                            NumberOfDoors = 5,
                            Transmission = "Manual",
                            VehicleId = 14
                        },
                        new
                        {
                            CarId = 9,
                            Description = "Compact and efficient",
                            HorsePower = 158,
                            IsDelete = false,
                            Kilometers = 30000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 15
                        },
                        new
                        {
                            CarId = 10,
                            Description = "Powerful sports car",
                            HorsePower = 450,
                            IsDelete = false,
                            Kilometers = 5000,
                            NumberOfDoors = 2,
                            Transmission = "Manual",
                            VehicleId = 16
                        },
                        new
                        {
                            CarId = 11,
                            Description = "Stylish and fast",
                            HorsePower = 650,
                            IsDelete = false,
                            Kilometers = 15000,
                            NumberOfDoors = 2,
                            Transmission = "Automatic",
                            VehicleId = 17
                        },
                        new
                        {
                            CarId = 12,
                            Description = "Reliable and affordable",
                            HorsePower = 147,
                            IsDelete = false,
                            Kilometers = 20000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 18
                        },
                        new
                        {
                            CarId = 13,
                            Description = "Sporty and compact",
                            HorsePower = 186,
                            IsDelete = false,
                            Kilometers = 10000,
                            NumberOfDoors = 4,
                            Transmission = "Automatic",
                            VehicleId = 19
                        });
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Motorcycle", b =>
                {
                    b.Property<int>("MotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MotorcycleId"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Kw")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("MotorcycleId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Motorcycles");

                    b.HasData(
                        new
                        {
                            MotorcycleId = 1,
                            IsDelete = false,
                            Kw = 45,
                            VehicleId = 5
                        });
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.SuperCar", b =>
                {
                    b.Property<int>("SuperCarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SuperCarId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int>("Kilometers")
                        .HasColumnType("int");

                    b.Property<string>("MaxSpeed")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<int>("NumberOfDoors")
                        .HasColumnType("int");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasMaxLength(1700)
                        .HasColumnType("nvarchar(1700)");

                    b.HasKey("SuperCarId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SuperCars");

                    b.HasData(
                        new
                        {
                            SuperCarId = 1,
                            Description = "The F8 Tributo uses the same engine from the 488 Pista, a 3.9 L twin-turbocharged V8 engine with a power output of 720 PS (530 kW; 710 hp) at 8000 rpm and 770 N⋅m (568 lb⋅ft) of torque at 3250 rpm",
                            HorsePower = 710,
                            IsDelete = false,
                            Kilometers = 8500,
                            MaxSpeed = "350",
                            NumberOfDoors = 2,
                            Transmission = "Dual-Clutch Automatic",
                            VehicleId = 7,
                            Weight = "1400"
                        },
                        new
                        {
                            SuperCarId = 2,
                            Description = "The Pagani Huayra is a masterpiece of automotive engineering, renowned for its breathtaking design and performance. With an aerodynamic, lightweight body crafted from carbon-titanium, it achieves exceptional speed and agility. The Huayra’s performance is complemented by luxurious Italian craftsmanship and cutting-edge technology, making it a unique blend of art and science on wheels.",
                            HorsePower = 791,
                            IsDelete = false,
                            Kilometers = 1500,
                            MaxSpeed = "383",
                            NumberOfDoors = 2,
                            Transmission = "7-Speed Sequential Manual",
                            VehicleId = 8,
                            Weight = "1350"
                        },
                        new
                        {
                            SuperCarId = 3,
                            Description = "The Lamborghini Aventador is an iconic supercar that combines Lamborghini's signature aggressive design with world-class performance. Equipped with a naturally aspirated V12 engine, it delivers a raw and thrilling driving experience. The Aventador is known for its sharp lines, scissor doors, and a commanding presence, making it a favorite among supercar enthusiasts.",
                            HorsePower = 769,
                            IsDelete = false,
                            Kilometers = 3200,
                            MaxSpeed = "355",
                            NumberOfDoors = 2,
                            Transmission = "7-Speed Automated Manual (ISR)",
                            VehicleId = 9,
                            Weight = "1575"
                        },
                        new
                        {
                            SuperCarId = 4,
                            Description = "The Huracán EVO features a naturally aspirated 5.2 L V10 engine producing 640 hp and 600 Nm of torque.",
                            HorsePower = 640,
                            IsDelete = false,
                            Kilometers = 3000,
                            MaxSpeed = "325",
                            NumberOfDoors = 2,
                            Transmission = "7-Speed Automatic",
                            VehicleId = 20,
                            Weight = "1382"
                        },
                        new
                        {
                            SuperCarId = 5,
                            Description = "The Bugatti Chiron boasts an 8.0 L quad-turbocharged W16 engine with 1,479 hp and 1,600 Nm of torque.",
                            HorsePower = 1479,
                            IsDelete = false,
                            Kilometers = 500,
                            MaxSpeed = "420",
                            NumberOfDoors = 2,
                            Transmission = "7-Speed Dual-Clutch",
                            VehicleId = 21,
                            Weight = "1995"
                        },
                        new
                        {
                            SuperCarId = 6,
                            Description = "Powered by a 4.0 L twin-turbocharged V8 engine, the McLaren 720S produces 710 hp and 770 Nm of torque.",
                            HorsePower = 710,
                            IsDelete = false,
                            Kilometers = 12000,
                            MaxSpeed = "341",
                            NumberOfDoors = 2,
                            Transmission = "7-Speed Dual-Clutch",
                            VehicleId = 22,
                            Weight = "1283"
                        },
                        new
                        {
                            SuperCarId = 7,
                            Description = "The 911 Turbo S comes with a 3.8 L twin-turbocharged flat-six engine, producing 640 hp and 800 Nm of torque.",
                            HorsePower = 640,
                            IsDelete = false,
                            Kilometers = 8000,
                            MaxSpeed = "330",
                            NumberOfDoors = 2,
                            Transmission = "8-Speed PDK",
                            VehicleId = 23,
                            Weight = "1640"
                        },
                        new
                        {
                            SuperCarId = 8,
                            Description = "The Valkyrie has a 6.5 L naturally aspirated V12 engine paired with an electric motor, producing a combined output of 1160 hp.",
                            HorsePower = 1160,
                            IsDelete = false,
                            Kilometers = 1000,
                            MaxSpeed = "402",
                            NumberOfDoors = 2,
                            Transmission = "7-Speed Single Clutch",
                            VehicleId = 24,
                            Weight = "1130"
                        },
                        new
                        {
                            SuperCarId = 9,
                            Description = "The Jesko Absolut is powered by a 5.0 L twin-turbocharged V8 engine producing 1600 hp with E85 fuel.",
                            HorsePower = 1600,
                            IsDelete = false,
                            Kilometers = 200,
                            MaxSpeed = "483",
                            NumberOfDoors = 2,
                            Transmission = "9-Speed Koenigsegg Light Speed Transmission",
                            VehicleId = 25,
                            Weight = "1320"
                        });
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Truck", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("CargoCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EuroNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("HorsePower")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("Transmission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.ToTable("Trucks");

                    b.HasData(
                        new
                        {
                            VehicleId = 6,
                            CargoCapacity = 12000,
                            Description = "Best truck",
                            EuroNumber = "Euro 6",
                            HorsePower = 650,
                            IsDelete = false,
                            Transmission = "Automatic",
                            TruckId = 1
                        });
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("FuelType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("VehicleId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            Color = "White",
                            FuelType = "Diesel",
                            ImageUrl = "https://d3ok64umd5ysj.cloudfront.net/dev/assets/images/gallery/alpine-white-e91-bmw-335i-wagon-estate-forgestar-f14-bagged-stance-c.jpg",
                            IsDelete = false,
                            Make = "BMW",
                            Model = "330D E91",
                            Price = 21500m,
                            VehicleType = "Car",
                            Year = new DateTime(2012, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 2,
                            Color = "Black",
                            FuelType = "Diesel",
                            ImageUrl = "https://garrybase.com/images/full/uploads/2021/AWEsL34IiTvPxXp2k8M7JcCdJrsZKJEiqimwpWpi.jpg",
                            IsDelete = false,
                            Make = "Merces",
                            Model = "e-clas E320CDI",
                            Price = 22500m,
                            VehicleType = "Car",
                            Year = new DateTime(2006, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 3,
                            Color = "White",
                            FuelType = "Petrol",
                            ImageUrl = "https://frankfurt.apollo.olxcdn.com/v1/files/r8lz4w93so09-BG/image",
                            IsDelete = false,
                            Make = "AUDI",
                            Model = "A8 Long",
                            Price = 150000m,
                            VehicleType = "Car",
                            Year = new DateTime(2022, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 4,
                            Color = "Brown",
                            FuelType = "Diesel",
                            ImageUrl = "https://www.lectura-specs.bg/models/renamed/detail_max_retina/avtobusi-za-turisticeski-avtobusi-9700-dd-volvo-buses.jpg",
                            IsDelete = false,
                            Make = "Volvo",
                            Model = "9900 DD",
                            Price = 198222m,
                            VehicleType = "Bus",
                            Year = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 5,
                            Color = "red",
                            FuelType = "Petrol",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRTUkEaOz8kEyPTk3ansNtGsVrlm4zR0PBuMQ&s",
                            IsDelete = false,
                            Make = "Honda",
                            Model = "450",
                            Price = 19800m,
                            VehicleType = "Motorcycle",
                            Year = new DateTime(2022, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 6,
                            Color = "Orange",
                            FuelType = "Diesel",
                            ImageUrl = "https://www.hobbies.co.uk/media/catalog/product/cache/084ca19aa5ee10728706fd297654f270/1/5/156325man_1.jpg",
                            IsDelete = false,
                            Make = "Man",
                            Model = "TGC",
                            Price = 198000m,
                            VehicleType = "Truck",
                            Year = new DateTime(2016, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 7,
                            Color = "Crimson Red",
                            FuelType = "Petrol",
                            ImageUrl = "https://ferrari-cdn.thron.com/delivery/public/thumbnail/ferrari/e9677798-7b8b-42b1-becf-387235c70b2a/bocxuw/std/488x325/e9677798-7b8b-42b1-becf-387235c70b2a?scalemode=auto",
                            IsDelete = false,
                            Make = "Ferrari",
                            Model = "F8",
                            Price = 450000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2022, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 8,
                            Color = "Carbon Fiber Black",
                            FuelType = "Petrol",
                            ImageUrl = "https://assets.newatlas.com/dims4/default/7afc3de/2147483647/strip/true/crop/1024x576+0+47/resize/1200x675!/quality/90/?url=http%3A%2F%2Fnewatlas-brightspot.s3.amazonaws.com%2Farchive%2Fpagani-huayra-supercar.jpg",
                            IsDelete = false,
                            Make = "Pagani",
                            Model = "Huayra",
                            Price = 3400000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2022, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 9,
                            Color = "Lamborghini Yellow",
                            FuelType = "Petrol",
                            ImageUrl = "https://www.exoticcarhacks.com/wp-content/uploads/2024/02/uFcbfiuL-scaled.jpeg",
                            IsDelete = false,
                            Make = "Lamborghini",
                            Model = "Aventador",
                            Price = 550000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2023, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 10,
                            Color = "Black",
                            FuelType = "Gasoline",
                            ImageUrl = "https://di-uploads-pod39.dealerinspire.com/portorchardford/uploads/2016/12/18-f150.jpg",
                            IsDelete = false,
                            Make = "Ford",
                            Model = "F-150",
                            Price = 35000m,
                            VehicleType = "Car",
                            Year = new DateTime(2018, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 11,
                            Color = "Blue",
                            FuelType = "Hybrid",
                            ImageUrl = "https://www.seegertoyota.com/static/dealer-12152/2020_Rav4_US_XLE-FWD_08W9_002.png",
                            IsDelete = false,
                            Make = "Toyota",
                            Model = "RAV4",
                            Price = 30000m,
                            VehicleType = "Car",
                            Year = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 12,
                            Color = "Red",
                            FuelType = "Electric",
                            ImageUrl = "https://ev-database.org/img/auto/Tesla_Model_S_2016/Tesla_Model_S_2016-01@2x.jpg",
                            IsDelete = false,
                            Make = "Tesla",
                            Model = "Model S",
                            Price = 79999m,
                            VehicleType = "Car",
                            Year = new DateTime(2022, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 13,
                            Color = "Grey",
                            FuelType = "Diesel",
                            ImageUrl = "https://images.clickdealer.co.uk/vehicles/5833/5833074/large1/136953099.jpg",
                            IsDelete = false,
                            Make = "Audi",
                            Model = "A6",
                            Price = 32000m,
                            VehicleType = "Car",
                            Year = new DateTime(2017, 9, 30, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 14,
                            Color = "Green",
                            FuelType = "Gasoline",
                            ImageUrl = "https://example.com/jeep-wrangler.jpg",
                            IsDelete = false,
                            Make = "Jeep",
                            Model = "Wrangler",
                            Price = 42000m,
                            VehicleType = "Car",
                            Year = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 15,
                            Color = "Blue",
                            FuelType = "Gasoline",
                            ImageUrl = "https://media.ed.edmunds-media.com/honda/civic/2019/oem/2019_honda_civic_sedan_si_fq_oem_1_1600.jpg",
                            IsDelete = false,
                            Make = "Honda",
                            Model = "Civic",
                            Price = 20000m,
                            VehicleType = "Car",
                            Year = new DateTime(2019, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 16,
                            Color = "Yellow",
                            FuelType = "Gasoline",
                            ImageUrl = "https://i.redd.it/lp5hnu6nyui51.jpg",
                            IsDelete = false,
                            Make = "Ford",
                            Model = "Mustang",
                            Price = 55000m,
                            VehicleType = "Car",
                            Year = new DateTime(2021, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 17,
                            Color = "Orange",
                            FuelType = "Gasoline",
                            ImageUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcT1G0QIvzNfjUC6aBI2TBa1SJsAMs9SSCDsJA&s",
                            IsDelete = false,
                            Make = "Chevrolet",
                            Model = "Camaro",
                            Price = 62000m,
                            VehicleType = "Car",
                            Year = new DateTime(2020, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 18,
                            Color = "White",
                            FuelType = "Gasoline",
                            ImageUrl = "https://www.earnhardthyundai.com/blogs/4378/wp-content/uploads/2021/08/What-Are-the-2022-Hyundai-Elantra-N-Performance-Specs_o.jpg",
                            IsDelete = false,
                            Make = "Hyundai",
                            Model = "Elantra",
                            Price = 22000m,
                            VehicleType = "Car",
                            Year = new DateTime(2022, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 19,
                            Color = "Red",
                            FuelType = "Gasoline",
                            ImageUrl = "https://www.carscoops.com/wp-content/uploads/2019/11/2020-Mazda3.jpg",
                            IsDelete = false,
                            Make = "Mazda",
                            Model = "Mazda3",
                            Price = 23000m,
                            VehicleType = "Car",
                            Year = new DateTime(2021, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 20,
                            Color = "Verde Mantis",
                            FuelType = "Petrol",
                            ImageUrl = "https://www.ilusso.com/imagetag/3092/main/l/Used-2023-Lamborghini-Huracan-EVO-Spyder-1712261384.jpg",
                            IsDelete = false,
                            Make = "Lamborghini",
                            Model = "Huracán EVO",
                            Price = 260000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 21,
                            Color = "Blue/Black",
                            FuelType = "Petrol",
                            ImageUrl = "https://news.dupontregistry.com/wp-content/uploads/2023/08/download---2023-07-26t155244.828-scaled.jpg",
                            IsDelete = false,
                            Make = "Bugatti",
                            Model = "Chiron",
                            Price = 3000000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2021, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 22,
                            Color = "Aurora Blue",
                            FuelType = "Petrol",
                            ImageUrl = "https://www.alastairbols.com/wp-content/uploads/2020/03/McLaren-720S-Performance-Aurora-Blue-for-sale-18-of-33.jpg",
                            IsDelete = false,
                            Make = "McLaren",
                            Model = "720S",
                            Price = 310000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2022, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 23,
                            Color = "Jet Black Metallic",
                            FuelType = "Petrol",
                            ImageUrl = "https://vehicle-images.dealerinspire.com/8b2a-210007648/WP0AD2A99PS259634/450d491619af6ccbc6f3ad2e0f1a647e.jpg",
                            IsDelete = false,
                            Make = "Porsche",
                            Model = "911 Turbo S",
                            Price = 230000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2023, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 24,
                            Color = "British Racing Green",
                            FuelType = "Hybrid",
                            ImageUrl = "https://www.astonmartin.com/-/media/aston-martin/images/default-source/models/valkyrie/valkyrie-retouched-nov21.jpg?mw=1920&rev=1e80dbb7953e4852bce3dfc43db4f69a&hash=2C97098139E6221C651689CFD85A296E",
                            IsDelete = false,
                            Make = "Aston Martin",
                            Model = "Valkyrie",
                            Price = 3000000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            VehicleId = 25,
                            Color = "Gunpowder Grey",
                            FuelType = "Petrol",
                            ImageUrl = "https://imodels.com.pl/wp-content/uploads/2023/11/9207180cb86955e787bd27e64fe07933-scaled.jpg",
                            IsDelete = false,
                            Make = "Koenigsegg",
                            Model = "Jesko Absolut",
                            Price = 3500000m,
                            VehicleType = "Supercar",
                            Year = new DateTime(2022, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleShowroom.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.ApplicationUserVehicle", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserVehicles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VehicleShowroom.Data.Models.Vehicle", "Vehicle")
                        .WithMany("UserVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Bus", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Buses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Car", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Cars")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Motorcycle", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Motorcycles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.SuperCar", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.Vehicle", "Vehicle")
                        .WithMany("SuperCars")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Truck", b =>
                {
                    b.HasOne("VehicleShowroom.Data.Models.Vehicle", "Vehicle")
                        .WithMany("Trucks")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUserVehicles");
                });

            modelBuilder.Entity("VehicleShowroom.Data.Models.Vehicle", b =>
                {
                    b.Navigation("Buses");

                    b.Navigation("Cars");

                    b.Navigation("Motorcycles");

                    b.Navigation("SuperCars");

                    b.Navigation("Trucks");

                    b.Navigation("UserVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
